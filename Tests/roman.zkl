//-*-c-*-

tester := TheVault.Test.UnitTester.UnitTester(__FILE__);

var [const] romans = L(	// class local var
   L("M", 1000), L("CM", 900), L("D",  500), L("CD", 400), L("C",  100),
   L("XC",  90), L("L",   50), L("XL",  40), L("X",   10), L("IX",   9),
   L("V",    5), L("IV",   4), L("I",    1));

class RomanNumber
{
   var value, text;
   	// create a new instance so we can add two Roman numbers
   fcn __notFound(name) { return(self(name)); }
//   fcn __notFound(name) { return(init(name)); }
   fcn init(text){
      self.text = text;
      value     = toArabic(text);
   }
   fcn toArabic(romanNumber){	// romanNumber needs to be upper case
      if(not RegExp("^[CDILMVX]+$").matches(romanNumber))
	 throw(Exception.ValueError("Not a Roman number: %s".fmt(romanNumber)));
      value:=0;
      foreach R,N in (romans){
	 while (0 == romanNumber.find(R)){
	    value += N;
	    romanNumber = romanNumber[R.len(),*];
	 }
      }
      return(value);
   }
   fcn toRoman(i){		// convert int to a roman number
      reg text = "";
      foreach R,N in (romans){ text += R*(i/N); i = i%N; }
      return(text);
   }
   fcn toString  { return("%s(%s)".fmt(text,value)); }
   fcn toInt     { return(value); }
   fcn __opAdd(R){ self(toRoman(value + R.toInt())) }
}

var Roman = RomanNumber;

tester.testRun(Roman.CCXX.toString,Void,"CCXX(220)",__LINE__);
tester.testRun(Roman.XLII.toString,Void,"XLII(42)",__LINE__);

tester.testRun((Roman.CCXX + Roman.XLII).toString,Void,"CCLXII(262)",__LINE__);
tester.testRun((Roman.XL + 2).toString,Void,"XLII(42)",__LINE__);

tester.testRun(Deferred.once(RomanNumber.toRoman,42),Void,"XLII",__LINE__);
tester.testRun(Deferred(RomanNumber.toRoman,220).noop,Void,"CCXX",__LINE__);


tester.testRun(fcn{
   foreach n in (Utils.range(1,2000)){
      if (n != RomanNumber.toArabic(RomanNumber.toRoman(n)))
	 return("Opps: " + n);
   }
   "OK"
},Void,"OK",__LINE__);

tester.testRun(fcn{ RomanNumber.toRoman(0) },Void,"",__LINE__);
tester.testRun(fcn{ Roman.IA },"ValueError",Void,__LINE__);
tester.testRun(fcn{ Roman.II.toString() },Void,"II(2)",__LINE__);
tester.testRun(fcn{ Roman.CCXX.II.type },Void,"Class",__LINE__);
tester.testRun(fcn{ Roman.CCXX.II.toString() },Void,"II(2)",__LINE__);
tester.testRun(fcn{ Roman.CCXX("II").toString() },Void,"II(2)",__LINE__);

fcn{ Roman.CCXX("II") }.unasm();

	///////////////////////////////// Rosetta Code: Roman numerals/Decode
#<<<#
var [const] romans = L(
   L("M", 1000), L("CM", 900), L("D",  500), L("CD", 400), L("C",  100),
   L("XC",  90), L("L",   50), L("XL",  40), L("X",   10), L("IX",   9),
   L("V",    5), L("IV",   4), L("I",    1));
fcn toArabic(romanNumber){	// romanNumber needs to be upper case
   if (not RegExp("^[CDILMVX]+$").matches(romanNumber))
      throw(Exception.ValueError("Not a Roman number: %s".fmt(romanNumber)));
   reg value = 0;
   foreach R,N in (romans){
      while (0 == romanNumber.find(R)){
	 value += N;
	 romanNumber = romanNumber[R.len(),*];
      }
   }
   return(value);
}
toArabic("MCMXC")   //-->1990
toArabic("MMVIII")  //-->2008
toArabic("MDCLXVI") //-->1666
#<<<#
tester.testRun(Roman.toArabic.fp("MCMXC"),Void,1990,__LINE__);
tester.testRun(Roman.toArabic.fp("MMVIII"),Void,2008,__LINE__);
tester.testRun(Roman.toArabic.fp("MDCLXVI"),Void,1666,__LINE__);


	///////////////////////////////// Rosetta Code: Roman numerals/Encode
#<<<#
var [const] romans = L(
   L("M", 1000), L("CM", 900), L("D",  500), L("CD", 400), L("C",  100),
   L("XC",  90), L("L",   50), L("XL",  40), L("X",   10), L("IX",   9),
   L("V",    5), L("IV",   4), L("I",    1));
fcn toRoman(i){		// convert int to a roman number
   reg text = "";
   foreach R,N in (romans){ text += R*(i/N); i = i%N; }
   return(text);
}
toRoman(1990) //-->"MCMXC"
toRoman(2008) //-->"MMVIII"
toRoman(1666) //-->"MDCLXVI"
#<<<#
tester.testRun(Roman.toRoman.fp(1990),Void,"MCMXC",__LINE__);
tester.testRun(Roman.toRoman.fp(2008),Void,"MMVIII",__LINE__);
tester.testRun(Roman.toRoman.fp(1666),Void,"MDCLXVI",__LINE__);



tester.stats();
returnClass(tester);
