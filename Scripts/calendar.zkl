//-*-c-*-
// RS: Calendar
//Gregorian calender only. Hard coded to a fit on a 80x43 terminal (somewhat half assed).
// zkl calender [year [title (bunch of words)]]

var [const] D=Time.Date, days="Su Mo Tu We Th Fr Sa";

fcn center(text,m){ String(" "*((m-text.len())/2),text) }

fcn oneMonth(year,month){
   day1:=D.zeller(year,month,1);    //1969-1-1 -->3 (Wed, ISO 8601)
   dayz:=D.daysInMonth(year,month); //1969-1   -->31
   List(center(D.monthNames[month],days.len()),days).extend(
      (1).pump(dayz,(0).pump(day1,List,T(Void,""))).apply("%2s ".fmt)
      .pump(List,T(Void.Read,days.len()/3,False),String.create));
}

const M=70;	// mystery number
fcn oneYear(y=1969,title="3 Days of Peace & Music"){
   println(center(title,M),"\n",center(y.toString(),M),"\n");
   [1..12,3].pump(String,'wrap(m){  // 3 months per line
      mmm:=m.pump(3,List,oneMonth.fp(y)); //L(L(7-8 lines), L(...), L(...))
      if(mmm.apply("len").sum() % 3)  // months have diff # of lines, pad
	 mmm=mmm.apply("append","");
      Utils.zipWith("%-25s%-25s%-25s\n".fmt,
           mmm.xplode()).concat() + (if (m<D.October) "\n" else "")
   })
}

if(vm.numArgs){ 
   y:=vm.nthArg(0).toInt();
   oneYear(y,vm.arglist[1,*].concat(" ")).println();
}
else oneYear().println();

#<<<#
oneMonth produces a list of strings that make up a one month calender.
Each day is three characters, the first line is padded with blanks to line
it up with the 1st day of the week.  The entire month is one long list of
"days" that is then chunked into a list of weeks (one line per week).
oneYear takes 3 months and builds the page line by line.
#<<<#

